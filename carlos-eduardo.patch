From 39c10c679dca48d838d2893cd46e8efcf78a3c50 Mon Sep 17 00:00:00 2001
From: Carlos Nogueira <cedon.mail@gmail.com>
Date: Mon, 16 Mar 2020 00:58:01 -0300
Subject: [PATCH] Carlos Nogueira's solution

---
 README.md                                | 202 +++++------------------
 ansible/README.md                        |  22 +++
 ansible/deploy.yml                       |   4 +
 ansible/inventory.yml                    |   3 +
 ansible/pre-inst-infra/.travis.yml       |  29 ++++
 ansible/pre-inst-infra/README.md         |  38 +++++
 ansible/pre-inst-infra/defaults/main.yml |   2 +
 ansible/pre-inst-infra/handlers/main.yml |   2 +
 ansible/pre-inst-infra/meta/main.yml     |  53 ++++++
 ansible/pre-inst-infra/tasks/main.yml    |  54 ++++++
 ansible/pre-inst-infra/tests/inventory   |   2 +
 ansible/pre-inst-infra/tests/test.yml    |   5 +
 ansible/pre-inst-infra/vars/main.yml     |   2 +
 docker-compose.yaml                      |  79 +++++++++
 hello-node/Dockerfile                    |  19 +++
 hello-node/app.js                        |  27 ++-
 hello-node/exp.sh                        |   7 +
 hello-node/package-lock.json             | 169 +++++++++++++++++++
 hello-node/teste.js                      |  28 ++++
 hello-python/Dockerfile                  |  11 ++
 hello-python/app.py                      |  20 ++-
 hello-python/exp.sh                      |   3 +
 hello-python/requirements.txt            |   2 +-
 instance-dep.sh                          |   6 +
 packer/debian-core.json                  |  38 +++++
 terraform/README.md                      |  31 ++++
 terraform/site.tf                        |  50 ++++++
 terraform/variables.tf                   |  53 ++++++
 terraform/vpc.tf                         | 124 ++++++++++++++
 29 files changed, 903 insertions(+), 182 deletions(-)
 create mode 100644 ansible/README.md
 create mode 100644 ansible/deploy.yml
 create mode 100644 ansible/inventory.yml
 create mode 100644 ansible/pre-inst-infra/.travis.yml
 create mode 100644 ansible/pre-inst-infra/README.md
 create mode 100644 ansible/pre-inst-infra/defaults/main.yml
 create mode 100644 ansible/pre-inst-infra/handlers/main.yml
 create mode 100644 ansible/pre-inst-infra/meta/main.yml
 create mode 100644 ansible/pre-inst-infra/tasks/main.yml
 create mode 100644 ansible/pre-inst-infra/tests/inventory
 create mode 100644 ansible/pre-inst-infra/tests/test.yml
 create mode 100644 ansible/pre-inst-infra/vars/main.yml
 create mode 100644 docker-compose.yaml
 create mode 100644 hello-node/Dockerfile
 create mode 100644 hello-node/exp.sh
 create mode 100644 hello-node/package-lock.json
 create mode 100644 hello-node/teste.js
 create mode 100644 hello-python/Dockerfile
 create mode 100644 hello-python/exp.sh
 create mode 100755 instance-dep.sh
 create mode 100644 packer/debian-core.json
 create mode 100644 terraform/README.md
 create mode 100644 terraform/site.tf
 create mode 100644 terraform/variables.tf
 create mode 100644 terraform/vpc.tf

diff --git a/README.md b/README.md
index 9963e4c..24bd891 100644
--- a/README.md
+++ b/README.md
@@ -1,170 +1,44 @@
 # hello-devops
 
-_Please read these instructions carefully._
-
-There are 2 applications in this project:
-
-* **hello-python** is a web page that contains a form; when the form is submitted, hello-python enqueues the message on a RabbitMQ queue.
-
-* **hello-node** is a worker that consumes the RabbitMQ queue and stores any message on a MySQL database.
-
-There's also a `create_database.sql` script, to help you prepare the MySQL database.
-
-Each application contains a short README file with more information.
-
-## Problem
-
-**Deploy this entire stack** in a way that _any message entered on the hello-python form is stored on a MySQL database by hello-node_.
-
-* **There are a few bugs in the code**, and you'll need to fix them to solve this exercise; you should not require any specific knowledge of either Python or NodeJS to solve these issues.
-
-* If you need to make any changes to help you debugging (such as adding logs or catching exceptions) we suggest you keep them so we can understand your thought process.
-
-* If you have some knowledge of Python or NodeJS development, feel free to implement or suggest _simple_ improvements to the applications to make them production-ready.
-
-## Solutions
-
-We'll accept _any_ of the following types of solution:
-
-* A script using a CLI, SDK, API or library that deploys the stack on a host running a modern Linux distribution _or_ on the AWS cloud.
-
-* A Docker Compose file _or_ another similar container orchestration solution that deploys the stack on a host running a modern Linux distribution _or_ on the AWS cloud.
-
-* A recipe using one or more configuration management tools (e.g. Terraform, Ansible, Chef, Puppet, CloudFormation, Vagrant, Packer, etc.) that deploys the stack on a host running a modern Linux distribution _or_ on the AWS cloud.
-
-**Important:** please **edit this README file** with step-by-step instructions on _how_ to deploy using your solution. Feel free to also include a short paragraph and/or a diagram explaining your solution.
-
-## Expectations
-
-When assessing this exercise, we will take the following points into consideration:
-
-* Whether the solution works or not
-* How _easy_ it isÂ to deploy the solution
-* How _resilient_ it is (e.g. if the database takes a few more seconds to start than usual, does the system stop working and never recovers?)
-
-Suppose that a _junior_ developer (who has access to most common Linux distributions and an AWS account) will try to run your solution. Would they be able to install all requirements and run it easily? Would they be able to verify that it works? Should any problems arise (e.g. a package is missing), would they be able to identify and fix it?
-
-We don't expect a production-grade solution, but we expect you to show that you'd be able to deploy a production-grade distributed system given enough tools and time.
-
-## Submissions
-
-You should send us a [git patch](https://git-scm.com/docs/git-format-patch) file with your solution. To do so follow these steps:
-
-1. Clone (do NOT fork) this repository to your machine:
-    ```console
-    $ git clone https://github.com/quintoandar/hello-devops.git
-    ```
-
-2. <a name="step2"></a>Implement your solution
-
-1. Take a look at your changes:
-
-    ```console
-    $ git status
-
-    On branch master
-    Your branch is up to date with 'origin/master'.
-
-    Changes not staged for commit:
-    (use "git add/rm <file>..." to update what will be committed)
-    (use "git checkout -- <file>..." to discard changes in working directory)
-
-        modified:   README.md
-        deleted:    create_database.sql
-
-    Untracked files:
-    (use "git add <file>..." to include in what will be committed)
-
-        asfotosdafestaficaramotimas.exe
-        importantfile.yaml
-        mysql/
-
-    no changes added to commit (use "git add" and/or "git commit -a")
-    ```
-
-1. If necessary, add new files and folders (don't include unnecessary files such as `asfotosdafestaficaramotimas.exe`):
-    ```console
-    $ git add -N importantfile.yaml mysql
-    ```
-
-1. Take a new look at your changes and check the diff:
-    ```console
-    $ git status
-
-    On branch master
-    Your branch is up to date with 'origin/master'.
-
-    Changes not staged for commit:
-    (use "git add <file>..." to update what will be committed)
-    (use "git checkout -- <file>..." to discard changes in working directory)
-
-        modified:   README.md
-        new file:   importantfile.yaml
-        renamed:    create_database.sql -> mysql/create_database.sql
-
-    Untracked files:
-    (use "git add <file>..." to include in what will be committed)
-
-        asfotosdafestaficaramotimas.exe
-
-    no changes added to commit (use "git add" and/or "git commit -a")
-    ```
-    ```console
-    $ git diff
-    ```
-
-    ```diff
-    diff --git a/README.md b/README.md
-    index e723eca..de696b1 100644
-    --- a/README.md
-    +++ b/README.md
-    @@ -69,3 +69,7 @@ Please do **not** fork this repository and do **not** publish your solution onli
-    ## Contact
-
-    Feel free to reach out if you have any questions! Also, we expect this problem to take some hours at most, but please do get in touch if you need more time to provide a good solution! It is far better than delivering something that does not work :)
-    +
-    +## How to run it
-    +
-    +Instructions
-    diff --git a/importantfile.yaml b/importantfile.yaml
-    new file mode 100644
-    index 0000000..ab061ed
-    --- /dev/null
-    +++ b/importantfile.yaml
-    @@ -0,0 +1,2 @@
-    +i:
-    +  am: important
-    diff --git a/create_database.sql b/mysql/create_database.sql
-    similarity index 100%
-    rename from create_database.sql
-    rename to mysql/create_database.sql
-    ```
-
-1. Make sure that it looks like your solution, otherwise repeat the steps above. If everything looks ok, move to the next step.
-
-1. Commit your changes locally:
+    - This deploy an stack on an Virtual Machine or EC2 Instance
+    - Optional configurations files for support AMI, EC2 and Debian Linux. 
+
+## Usage
+    - ansible: hello-devops deploy playbook
+    - create_database.sql: sql script to create de database
+    - docker-compose.yaml: App stack docker compose
+    - hello-node: Nodejs rabbitmq consumer
+    - hello-python: Producer rabbitmq
+    - instance-dep.sh: Server sh script to deploy solution dependences(Optional)
+    - packer: packer json to create an AMI with the solution dependences(Optional)
+    - terraform: HCL scripts to deploy an simple EC2 Instance(Optional)
+
+# Requirements
+
+#### User host
+    - Ansible 2.0+
+    - Terraform 0.11+
+    - Packer 1.5+
+
+#### AWS EC2 host or Virtual Machine   
+    - debian10+
+    - ssh
+    - sudo
+    - python3
+    - python3-apt
+    - apt
+
+# Deploy
+To deploy de solution:
+
+1. edit the ansible inventory:
     ```console
-    $ git commit -am "My solution"
-
-    [master a5e1d83] My solution
-    3 files changed, 6 insertions(+)
-    create mode 100644 importantfile.yaml
-    rename create_database.sql => mysql/create_database.sql (100%)
+      # add server host IP or EC2 public DNS
+      [server_name]
+      192.168.0.13
     ```
-
-1. Create a patch file containing your changes:
+1. execute the ansible:
     ```console
-    $ git format-patch origin/master --stdout > result.patch
+    # substitute USER_LOGIN_NAME for the OS user(must be sudo)
+    $ ansible-playbook ansible/deploy.yml -i ansible/inventory -b -K -u USER_LOGIN_NAME
     ```
-
-1. Check `result.patch`, it should look like `git diff` output. To check the diff after committing, use `git diff origin/master HEAD`.
-
-    1. If something looks wrong, run `git reset origin/master` and go to [step 2](#step2).
-
-    1. If everything looks right Email us the `result.patch` file.
-
-Please do **not** fork this repository and do **not** publish your solution online!
-
-## Contact
-
-Feel free to reach out if you have any questions! Also, we expect this problem to take some hours at most, but please do get in touch if you need more time to provide a good solution! It is far better than delivering something that does not work :)
diff --git a/ansible/README.md b/ansible/README.md
new file mode 100644
index 0000000..f843629
--- /dev/null
+++ b/ansible/README.md
@@ -0,0 +1,22 @@
+# hello-devops
+
+    - This deploy an stack on an Virtual Machine or EC2 Instance
+deploy.yml  inventory.yml  pre-inst-infra
+## Usage
+    - deploy.yml: YAML stack deploy
+    - inventory.yml: ansible inventory
+    - pre-inst-infra: ansible infrastructure configuration role
+
+# Requirements
+
+#### User host
+    - Ansible 2.0+
+
+#### AWS EC2 host or Virtual Machine   
+    - debian10+
+    - ssh
+    - sudo
+    - python3
+    - python3-apt
+    - apt
+
diff --git a/ansible/deploy.yml b/ansible/deploy.yml
new file mode 100644
index 0000000..3e714de
--- /dev/null
+++ b/ansible/deploy.yml
@@ -0,0 +1,4 @@
+- hosts: server_name
+  roles:
+    - pre-inst-infra
+
diff --git a/ansible/inventory.yml b/ansible/inventory.yml
new file mode 100644
index 0000000..2aaaed2
--- /dev/null
+++ b/ansible/inventory.yml
@@ -0,0 +1,3 @@
+[server_name]
+192.168.0.13
+
diff --git a/ansible/pre-inst-infra/.travis.yml b/ansible/pre-inst-infra/.travis.yml
new file mode 100644
index 0000000..36bbf62
--- /dev/null
+++ b/ansible/pre-inst-infra/.travis.yml
@@ -0,0 +1,29 @@
+---
+language: python
+python: "2.7"
+
+# Use the new container infrastructure
+sudo: false
+
+# Install ansible
+addons:
+  apt:
+    packages:
+    - python-pip
+
+install:
+  # Install ansible
+  - pip install ansible
+
+  # Check ansible version
+  - ansible --version
+
+  # Create ansible.cfg with correct roles_path
+  - printf '[defaults]\nroles_path=../' >ansible.cfg
+
+script:
+  # Basic role syntax check
+  - ansible-playbook tests/test.yml -i tests/inventory --syntax-check
+
+notifications:
+  webhooks: https://galaxy.ansible.com/api/v1/notifications/
\ No newline at end of file
diff --git a/ansible/pre-inst-infra/README.md b/ansible/pre-inst-infra/README.md
new file mode 100644
index 0000000..225dd44
--- /dev/null
+++ b/ansible/pre-inst-infra/README.md
@@ -0,0 +1,38 @@
+Role Name
+=========
+
+A brief description of the role goes here.
+
+Requirements
+------------
+
+Any pre-requisites that may not be covered by Ansible itself or the role should be mentioned here. For instance, if the role uses the EC2 module, it may be a good idea to mention in this section that the boto package is required.
+
+Role Variables
+--------------
+
+A description of the settable variables for this role should go here, including any variables that are in defaults/main.yml, vars/main.yml, and any variables that can/should be set via parameters to the role. Any variables that are read from other roles and/or the global scope (ie. hostvars, group vars, etc.) should be mentioned here as well.
+
+Dependencies
+------------
+
+A list of other roles hosted on Galaxy should go here, plus any details in regards to parameters that may need to be set for other roles, or variables that are used from other roles.
+
+Example Playbook
+----------------
+
+Including an example of how to use your role (for instance, with variables passed in as parameters) is always nice for users too:
+
+    - hosts: servers
+      roles:
+         - { role: username.rolename, x: 42 }
+
+License
+-------
+
+BSD
+
+Author Information
+------------------
+
+An optional section for the role authors to include contact information, or a website (HTML is not allowed).
diff --git a/ansible/pre-inst-infra/defaults/main.yml b/ansible/pre-inst-infra/defaults/main.yml
new file mode 100644
index 0000000..6d7bd3c
--- /dev/null
+++ b/ansible/pre-inst-infra/defaults/main.yml
@@ -0,0 +1,2 @@
+---
+# defaults file for pre-inst-infra
\ No newline at end of file
diff --git a/ansible/pre-inst-infra/handlers/main.yml b/ansible/pre-inst-infra/handlers/main.yml
new file mode 100644
index 0000000..6d46d2c
--- /dev/null
+++ b/ansible/pre-inst-infra/handlers/main.yml
@@ -0,0 +1,2 @@
+---
+# handlers file for pre-inst-infra
\ No newline at end of file
diff --git a/ansible/pre-inst-infra/meta/main.yml b/ansible/pre-inst-infra/meta/main.yml
new file mode 100644
index 0000000..227ad9c
--- /dev/null
+++ b/ansible/pre-inst-infra/meta/main.yml
@@ -0,0 +1,53 @@
+galaxy_info:
+  author: your name
+  description: your role description
+  company: your company (optional)
+
+  # If the issue tracker for your role is not on github, uncomment the
+  # next line and provide a value
+  # issue_tracker_url: http://example.com/issue/tracker
+
+  # Choose a valid license ID from https://spdx.org - some suggested licenses:
+  # - BSD-3-Clause (default)
+  # - MIT
+  # - GPL-2.0-or-later
+  # - GPL-3.0-only
+  # - Apache-2.0
+  # - CC-BY-4.0
+  license: license (GPL-2.0-or-later, MIT, etc)
+
+  min_ansible_version: 2.9
+
+  # If this a Container Enabled role, provide the minimum Ansible Container version.
+  # min_ansible_container_version:
+
+  #
+  # Provide a list of supported platforms, and for each platform a list of versions.
+  # If you don't wish to enumerate all versions for a particular platform, use 'all'.
+  # To view available platforms and versions (or releases), visit:
+  # https://galaxy.ansible.com/api/v1/platforms/
+  #
+  # platforms:
+  # - name: Fedora
+  #   versions:
+  #   - all
+  #   - 25
+  # - name: SomePlatform
+  #   versions:
+  #   - all
+  #   - 1.0
+  #   - 7
+  #   - 99.99
+
+  galaxy_tags: []
+    # List tags for your role here, one per line. A tag is a keyword that describes
+    # and categorizes the role. Users find roles by searching for tags. Be sure to
+    # remove the '[]' above, if you add tags to this list.
+    #
+    # NOTE: A tag is limited to a single word comprised of alphanumeric characters.
+    #       Maximum 20 tags per role.
+
+dependencies: []
+  # List your role dependencies here, one per line. Be sure to remove the '[]' above,
+  # if you add dependencies to this list.
+  
\ No newline at end of file
diff --git a/ansible/pre-inst-infra/tasks/main.yml b/ansible/pre-inst-infra/tasks/main.yml
new file mode 100644
index 0000000..6eff1f6
--- /dev/null
+++ b/ansible/pre-inst-infra/tasks/main.yml
@@ -0,0 +1,54 @@
+---
+# tasks file for pre-inst-infra
+- name: Ensure apt-transport-https is installed
+  apt:
+      name: apt-transport-https
+      state: present
+- name: Ensure ca-certificates is installed
+  apt:
+      name: ca-certificates
+      state: present
+- name: Ensure gnupg2 is installed
+  apt:
+      name: gnupg2
+      state: present
+- name: Ensure curl is installed
+  apt:
+      name: curl
+      state: present
+- name: Add key
+  apt_key: id=A88D21E9 state=present url=https://get.docker.com/gpg
+- name: Installing docker
+  shell: curl -sSL https://get.docker.com/ | sh
+- name: Ensure docker-compose is installed
+  apt:
+      name: docker-compose
+      state: present
+- name: Ensure docker-compose is installed
+  apt:
+      name: docker-compose
+      state: present
+- name: Stop Stack Compose [ignore error msg on 1rst deploy]
+  shell: docker-compose -f /var/opt/hello-devops/docker-compose.yaml down
+  ignore_errors: true 
+- name: Execute Docker System Prune
+  shell: docker system prune -f
+  ignore_errors: true 
+- name: Erase app old version
+  file:
+      path: /var/opt/hello-devops
+      state: absent
+- name: Create app new version
+  file:
+      path: /var/opt/hello-devops
+      state: directory
+- name: Clone repository
+  copy:
+      src: ../../../
+      dest: /var/opt/hello-devops
+- name: Execute Rabbitmq Compose
+  shell: docker-compose -f /var/opt/hello-devops/docker-compose.yaml up -d hello-rabbit
+- pause:
+      seconds: 30 
+- name: Execute Stack Compose
+  shell: docker-compose -f /var/opt/hello-devops/docker-compose.yaml up -d
diff --git a/ansible/pre-inst-infra/tests/inventory b/ansible/pre-inst-infra/tests/inventory
new file mode 100644
index 0000000..878877b
--- /dev/null
+++ b/ansible/pre-inst-infra/tests/inventory
@@ -0,0 +1,2 @@
+localhost
+
diff --git a/ansible/pre-inst-infra/tests/test.yml b/ansible/pre-inst-infra/tests/test.yml
new file mode 100644
index 0000000..b68f25a
--- /dev/null
+++ b/ansible/pre-inst-infra/tests/test.yml
@@ -0,0 +1,5 @@
+---
+- hosts: localhost
+  remote_user: root
+  roles:
+    - pre-inst-infra
\ No newline at end of file
diff --git a/ansible/pre-inst-infra/vars/main.yml b/ansible/pre-inst-infra/vars/main.yml
new file mode 100644
index 0000000..6dd61c7
--- /dev/null
+++ b/ansible/pre-inst-infra/vars/main.yml
@@ -0,0 +1,2 @@
+---
+# vars file for pre-inst-infra
\ No newline at end of file
diff --git a/docker-compose.yaml b/docker-compose.yaml
new file mode 100644
index 0000000..3dfb32e
--- /dev/null
+++ b/docker-compose.yaml
@@ -0,0 +1,79 @@
+version: '2.0'
+services:
+  hello-rabbit:
+    image: rabbitmq
+    container_name: hello-rabbit-cont
+    environment:
+      - RABBITMQ_HOST=hello-rabbit
+    networks:
+      - devops-net
+  hello-db:
+    image: mariadb:10.1
+    container_name: hello-devops-my
+    command: --init-file /data/init.sql
+    environment:
+      - MYSQL_ROOT_PASSWORD=hello  # Requested, set the root's password of MySQL service.
+      - MYSQL_LOG_CONSOLE=true
+      - MYSQL_HOST=hello-nodejs
+      - MYSQL_USER=hello
+      - MYSQL_PASSWORD=hello
+      - MYSQL_DATABASE=hello
+    volumes:
+      - ./hello-devops-mysql/db:/var/lib/mysql  # Requested, specifies the path to MySQL data persistent store.
+      - ./create_database.sql:/data/init.sql
+    networks:
+      - devops-net
+  hello-nodejs:
+    build: ./hello-node
+    container_name: hello-node-cont
+    ports:
+      - "5672"
+    volumes:
+        - '.:/usr/src/app'
+    environment:
+      - RABBITMQ_HOST=hello-rabbit
+      - RABBITMQ_PORT=5672
+      - RABBITMQ_QUEUE=hello
+      - MYSQL_HOST=hello-db
+      - MYSQL_USER=hello
+      - MYSQL_PASSWORD=hello
+      - MYSQL_DB=hello 
+    depends_on:
+      - hello-db
+      - hello-rabbit
+    networks:
+      - devops-net
+
+  hello-python3:
+    build: ./hello-python
+    container_name: hello-python-cont
+    volumes:
+        - '.:/usr/src/app'
+    ports:
+      - "8000:8000"
+    environment:
+      - RABBITMQ_HOST=hello-rabbit
+      - RABBITMQ_PORT=5672
+      - RABBITMQ_QUEUE=hello
+    depends_on:
+      - hello-rabbit
+    networks:
+      - devops-net
+
+  phpmyadmin:
+    image: phpmyadmin/phpmyadmin
+    container_name: hello_phpmyadmin
+    environment:
+      - PMA_HOST=hello-db
+    restart: always
+    ports:
+      - 80:80
+    volumes:
+      - /sessions
+    networks:
+      - devops-net
+
+
+networks:
+  devops-net:
+
diff --git a/hello-node/Dockerfile b/hello-node/Dockerfile
new file mode 100644
index 0000000..f4e047a
--- /dev/null
+++ b/hello-node/Dockerfile
@@ -0,0 +1,19 @@
+FROM node:10
+
+# Create app directory
+WORKDIR /usr/src/app
+
+# Install app dependencies
+# A wildcard is used to ensure both package.json AND package-lock.json are copied
+# where available (npm@5+)
+COPY package*.json ./
+
+RUN npm install
+# If you are building your code for production
+# RUN npm ci --only=production
+
+# Bundle app source
+COPY . .
+
+#EXPOSE 8080
+CMD [ "node", "./hello-node/app.js" ]
diff --git a/hello-node/app.js b/hello-node/app.js
index 0f12b22..b8eb5e1 100644
--- a/hello-node/app.js
+++ b/hello-node/app.js
@@ -2,24 +2,35 @@
 var amqp = require("amqplib/callback_api");
 var mysql = require("mysql");
 
-var RABBITMQ_HOST = process.env.RABBITMQ_HOST || "localhost";
-var RABBITMQ_PORT = process.env.RABBITMQ_PORT || 5672;
-var RABBITMQ_QUEUE = process.env.RABBITMQ_QUEUE || "hello";
+//var RABBITMQ_HOST = process.env.RABBITMQ_HOST || "hello-rabbit";
+//var RABBITMQ_PORT = process.env.RABBITMQ_PORT || 5672;
+//var RABBITMQ_QUEUE = process.env.RABBITMQ_QUEUE || "hello";
+
+var RABBITMQ_HOST = process.env.RABBITMQ_HOST;
+var RABBITMQ_PORT = process.env.RABBITMQ_PORT;
+var RABBITMQ_QUEUE = process.env.RABBITMQ_QUEUE;
 
 var db = mysql.createConnection({
-  host: process.env.MYSQL_HOST || "localhost",
-  user: process.env.MYSQL_USER || "root",
+  host: process.env.MYSQL_HOST,
+  user: process.env.MYSQL_USER,
   password: process.env.MYSQL_PASSWORD,
-  database: process.env.MYSQL_DB || "hello"
+  database: process.env.MYSQL_DB
 });
 
+//var db = mysql.createConnection({
+//  host: process.env.MYSQL_HOST || "hello-db",
+//  user: process.env.MYSQL_USER || "hello",
+//  password: process.env.MYSQL_PASSWORD || "hello",
+//  database: process.env.MYSQL_DB || "hello"
+//});
+
 console.log(
   "Connecting to RabbitMQ at %s port %s...",
   RABBITMQ_HOST,
   RABBITMQ_PORT
 );
 
-var url = "amqp://" + RABBITMQ_HOST + RABBITMQ_PORT;
+var url = "amqp://" + RABBITMQ_HOST +":"+ RABBITMQ_PORT;
 amqp.connect(url, function(err, conn) {
   console.log("Connected to RabbitMQ at %s", url);
 
@@ -34,7 +45,7 @@ amqp.connect(url, function(err, conn) {
         console.log("Received message: %s", msg);
 
         db.query(
-          "INSERT INTO table SET ?",
+          "INSERT INTO Messages SET ?",
           { message: msg.content.toString() },
           function(err, result) {
             if (err) throw err;
diff --git a/hello-node/exp.sh b/hello-node/exp.sh
new file mode 100644
index 0000000..794dda8
--- /dev/null
+++ b/hello-node/exp.sh
@@ -0,0 +1,7 @@
+export RABBITMQ_HOST=localhost
+export RABBITMQ_PORT=5672
+export RABBITMQ_QUEUE=hello
+export MYSQL_HOST=localhost
+export MYSQL_USER=hello
+export MYSQL_PASSWORD=hello
+export MYSQL_DB=hello
diff --git a/hello-node/package-lock.json b/hello-node/package-lock.json
new file mode 100644
index 0000000..cbb3696
--- /dev/null
+++ b/hello-node/package-lock.json
@@ -0,0 +1,169 @@
+{
+  "name": "hello-node",
+  "version": "0.0.1",
+  "lockfileVersion": 1,
+  "requires": true,
+  "dependencies": {
+    "amqplib": {
+      "version": "0.5.5",
+      "resolved": "https://registry.npmjs.org/amqplib/-/amqplib-0.5.5.tgz",
+      "integrity": "sha512-sWx1hbfHbyKMw6bXOK2k6+lHL8TESWxjAx5hG8fBtT7wcxoXNIsFxZMnFyBjxt3yL14vn7WqBDe5U6BGOadtLg==",
+      "requires": {
+        "bitsyntax": "0.1.0",
+        "bluebird": "3.7.2",
+        "buffer-more-ints": "1.0.0",
+        "readable-stream": "1.1.14",
+        "safe-buffer": "5.1.2",
+        "url-parse": "1.4.7"
+      }
+    },
+    "bignumber.js": {
+      "version": "9.0.0",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz",
+      "integrity": "sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A=="
+    },
+    "bitsyntax": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/bitsyntax/-/bitsyntax-0.1.0.tgz",
+      "integrity": "sha512-ikAdCnrloKmFOugAfxWws89/fPc+nw0OOG1IzIE72uSOg/A3cYptKCjSUhDTuj7fhsJtzkzlv7l3b8PzRHLN0Q==",
+      "requires": {
+        "buffer-more-ints": "1.0.0",
+        "debug": "2.6.9",
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "bluebird": {
+      "version": "3.7.2",
+      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
+      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg=="
+    },
+    "buffer-more-ints": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/buffer-more-ints/-/buffer-more-ints-1.0.0.tgz",
+      "integrity": "sha512-EMetuGFz5SLsT0QTnXzINh4Ksr+oo4i+UGTXEshiGCQWnsgSs7ZhJ8fzlwQ+OzEMs0MpDAMr1hxnblp5a4vcHg=="
+    },
+    "core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
+    },
+    "debug": {
+      "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "requires": {
+        "ms": "2.0.0"
+      }
+    },
+    "inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "isarray": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
+    },
+    "ms": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
+    },
+    "mysql": {
+      "version": "2.18.1",
+      "resolved": "https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz",
+      "integrity": "sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==",
+      "requires": {
+        "bignumber.js": "9.0.0",
+        "readable-stream": "2.3.7",
+        "safe-buffer": "5.1.2",
+        "sqlstring": "2.3.1"
+      },
+      "dependencies": {
+        "isarray": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
+        },
+        "readable-stream": {
+          "version": "2.3.7",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
+          "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
+          "requires": {
+            "core-util-is": "1.0.2",
+            "inherits": "2.0.4",
+            "isarray": "1.0.0",
+            "process-nextick-args": "2.0.1",
+            "safe-buffer": "5.1.2",
+            "string_decoder": "1.1.1",
+            "util-deprecate": "1.0.2"
+          }
+        },
+        "string_decoder": {
+          "version": "1.1.1",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+          "requires": {
+            "safe-buffer": "5.1.2"
+          }
+        }
+      }
+    },
+    "process-nextick-args": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
+    },
+    "querystringify": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.1.1.tgz",
+      "integrity": "sha512-w7fLxIRCRT7U8Qu53jQnJyPkYZIaR4n5151KMfcJlO/A9397Wxb1amJvROTK6TOnp7PfoAmg/qXiNHI+08jRfA=="
+    },
+    "readable-stream": {
+      "version": "1.1.14",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
+      "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
+      "requires": {
+        "core-util-is": "1.0.2",
+        "inherits": "2.0.4",
+        "isarray": "0.0.1",
+        "string_decoder": "0.10.31"
+      }
+    },
+    "requires-port": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
+      "integrity": "sha1-kl0mAdOaxIXgkc8NpcbmlNw9yv8="
+    },
+    "safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
+    },
+    "sqlstring": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
+      "integrity": "sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A="
+    },
+    "string_decoder": {
+      "version": "0.10.31",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
+      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
+    },
+    "url-parse": {
+      "version": "1.4.7",
+      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.4.7.tgz",
+      "integrity": "sha512-d3uaVyzDB9tQoSXFvuSUNFibTd9zxd2bkVrDRvF5TmvWWQwqE4lgYJ5m+x1DbecWkw+LK4RNl2CU1hHuOKPVlg==",
+      "requires": {
+        "querystringify": "2.1.1",
+        "requires-port": "1.0.0"
+      }
+    },
+    "util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
+    }
+  }
+}
diff --git a/hello-node/teste.js b/hello-node/teste.js
new file mode 100644
index 0000000..72ab2a2
--- /dev/null
+++ b/hello-node/teste.js
@@ -0,0 +1,28 @@
+#!/usr/bin/env node
+
+var amqp = require('amqplib/callback_api');
+
+amqp.connect('amqp://localhost:5672', function(error0, connection) {
+    if (error0) {
+        throw error0;
+    }
+    connection.createChannel(function(error1, channel) {
+        if (error1) {
+            throw error1;
+        }
+
+        var queue = 'hello';
+
+        channel.assertQueue(queue, {
+            durable: false
+        });
+
+        console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", queue);
+
+        channel.consume(queue, function(msg) {
+            console.log(" [x] Received %s", msg.content.toString());
+        }, {
+            noAck: true
+        });
+    });
+});
diff --git a/hello-python/Dockerfile b/hello-python/Dockerfile
new file mode 100644
index 0000000..17b6ad9
--- /dev/null
+++ b/hello-python/Dockerfile
@@ -0,0 +1,11 @@
+FROM python:3
+
+WORKDIR /usr/src/app
+
+COPY requirements.txt ./
+RUN pip install --no-cache-dir -r requirements.txt
+
+COPY . .
+
+CMD ["python", "./hello-python/app.py"]
+
diff --git a/hello-python/app.py b/hello-python/app.py
index 8ffa61b..57ea8cd 100644
--- a/hello-python/app.py
+++ b/hello-python/app.py
@@ -3,9 +3,9 @@ from flask import Flask, request, jsonify
 
 app = Flask(__name__)
 
-host = os.getenv("RABBITMQ_HOST", "localhost")
-port = os.getenv("RABBITMQ_PORT", 5672)
-queue = os.getenv("RABBITMQ_QUEUE", "hello")
+hostA = os.getenv("RABBITMQ_HOST", "hello-rabbit")
+portA = os.getenv("RABBITMQ_PORT", 5672)
+queueA = os.getenv("RABBITMQ_QUEUE", "hello")
 
 html = """ 
 <br>Type your favourite <i>pudim</i> flavour: 
@@ -20,7 +20,9 @@ html = """
 @app.route('/', methods=['GET', 'POST'])
 def index():
     if request.method == 'POST':
-        app.logger.info(request.form.get("flavour"))
+        v = request.form.get("flavour")
+        app.logger.info(str(v))
+        enqueue(str(v))
     return html
 
 
@@ -31,14 +33,14 @@ def health():
 
 def enqueue(value):
     app.logger.info("Received message: %s", value)
-    params = pika.ConnectionParameters(host=host, port=port)
+    params = pika.ConnectionParameters(host=hostA, port=portA)
     connection = pika.BlockingConnection(params)
     channel = connection.channel()
-    channel.queue_declare(queue=queue)
-    channel.basic_publish(exchange='', routing_key=queue, body=value)
+    channel.queue_declare(queue=queueA)
+    channel.basic_publish(exchange='', routing_key=queueA, body=value)
     connection.close()
-    app.logger.info("Enqueued message on host %s:%s queue %s: %s", host, port,
-                    queue, value)
+    app.logger.info("Enqueued message on host %s:%s queue %s: %s", hostA, portA,
+                    queueA, value)
 
 
 if __name__ == "__main__":
diff --git a/hello-python/exp.sh b/hello-python/exp.sh
new file mode 100644
index 0000000..402f199
--- /dev/null
+++ b/hello-python/exp.sh
@@ -0,0 +1,3 @@
+export RABBITMQ_HOST=localhost
+export RABBITMQ_PORT=5672
+export RABBITMQ_QUEUE=hello
diff --git a/hello-python/requirements.txt b/hello-python/requirements.txt
index 49f710b..1439b7c 100644
--- a/hello-python/requirements.txt
+++ b/hello-python/requirements.txt
@@ -1,2 +1,2 @@
 Flask==1.0
-pika==0.11.2
+pika
diff --git a/instance-dep.sh b/instance-dep.sh
new file mode 100755
index 0000000..9c35120
--- /dev/null
+++ b/instance-dep.sh
@@ -0,0 +1,6 @@
+!#/bin/bash
+
+apt update
+apt upgrade -y
+apt install python3.7 python3-pip python3-apt -y
+
diff --git a/packer/debian-core.json b/packer/debian-core.json
new file mode 100644
index 0000000..de7d7aa
--- /dev/null
+++ b/packer/debian-core.json
@@ -0,0 +1,38 @@
+{
+    "variables": {
+      "aws_access_key": "",
+      "aws_secret_key": ""
+    },
+    "builders": [{
+      "type": "amazon-ebs",
+      "access_key": "{{user `aws_access_key`}}",
+      "secret_key": "{{user `aws_secret_key`}}",
+      "region": "us-east-1",
+      "source_ami_filter": {
+        "filters": {
+          "virtualization-type": "hvm",
+          "name": "debian-stretch-hvm-x86_64-gp2-2018-11-10-63975*",
+          "root-device-type": "ebs"
+        },
+        "owners": ["379101102735"],
+        "most_recent": true
+      },
+      "instance_type": "t2.micro",
+      "ssh_username": "admin",
+      "ami_name": "debian-core {{ timestamp }}"
+    }],
+    "provisioners": [
+      {
+      "type": "shell",
+      "inline": [
+        "sudo setenforce 0",
+        "sudo sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config",
+        "sudo apt install -y python3.7 python3-apt python3-pip",
+        "sudo sysctl --system",
+        "echo -e '*\t\thard\tnofile\t\t65535\n*\t\tsoft\tnofile\t\t65535' | sudo tee -a /etc/security/limits.conf"
+	]
+      }
+    ]
+}
+
+
diff --git a/terraform/README.md b/terraform/README.md
new file mode 100644
index 0000000..cb44ed1
--- /dev/null
+++ b/terraform/README.md
@@ -0,0 +1,31 @@
+# Terraform
+
+    - EC2 Instance Deploy
+
+## Usage
+    - site.tf: script with the site configurations
+    - variables.tf: environment variables
+    - vpc.tf: VPC configuration
+
+# Requirements
+
+#### User host
+    - Terraform 0.11+
+
+
+## Provide AWS EC2 Instance
+For an new EC2 Instance
+
+    - set AWS environment variables.tf
+
+`
+    - $ terraform init
+`
+
+`
+    - $ terraform plan 
+`
+
+`
+    - $ terraform apply
+
diff --git a/terraform/site.tf b/terraform/site.tf
new file mode 100644
index 0000000..40c6191
--- /dev/null
+++ b/terraform/site.tf
@@ -0,0 +1,50 @@
+# Create a new instance of the latest Debian Stretch on an
+# t2.micro node with an AWS Tag naming it "EC2-Nome-Instancia"
+provider "aws" {
+  access_key =  "${var.accessKey}"
+  secret_key =  "${var.secretKey}"
+  region = "us-west-2"
+}
+
+data "aws_ami" "debian" {
+  most_recent = true
+
+  filter {
+    name   = "name"
+    values = ["debian-stretch-hvm-x86_64-gp2-2018-11-10-63975"]
+  }
+
+  filter {
+    name   = "virtualization-type"
+    values = ["hvm"]
+  }
+
+  owners = ["379101102735"] 
+}
+
+
+resource "aws_network_interface" "eth9" {
+  subnet_id   = "${aws_subnet.My_VPC_Subnet.id}"
+  private_ips = ["10.0.1.5"]
+
+  tags {
+    Name = "primary_network_interface"
+  }
+}
+
+
+resource "aws_instance" "web" {
+  ami           = "${data.aws_ami.debian.id}"
+  instance_type = "t2.micro"
+
+  network_interface {
+    network_interface_id = "${aws_network_interface.eth9.id}"
+    device_index         = 0
+  }
+
+  tags {
+    Name = "EC2-Nome-Instancia"
+  }
+}
+
+
diff --git a/terraform/variables.tf b/terraform/variables.tf
new file mode 100644
index 0000000..8c33483
--- /dev/null
+++ b/terraform/variables.tf
@@ -0,0 +1,53 @@
+# variables.tf
+
+variable "accessKey" {
+ default = "insira aqui sua access key aws"
+}
+
+variable "secretKey" {
+ default = "insira aqui sua secret key aws"
+}
+
+variable "region" {
+ default = "us-west-1"
+}
+
+variable "availabilityZone" {
+        default = "us-west-2a"
+}
+
+variable "instanceTenancy" {
+ default = "default"
+}
+
+variable "dnsSupport" {
+ default = true
+}
+
+variable "dnsHostNames" {
+        default = true
+}
+
+variable "vpcCIDRblock" {
+ default = "10.0.0.0/16"
+}
+
+variable "subnetCIDRblock" {
+        default = "10.0.1.0/24"
+}
+
+variable "destinationCIDRblock" {
+        default = "0.0.0.0/0"
+}
+
+variable "ingressCIDRblock" {
+        type = "list"
+        default = [ "0.0.0.0/0" ]
+}
+
+variable "mapPublicIP" {
+        default = true
+}
+
+# end of variables.tf
+
diff --git a/terraform/vpc.tf b/terraform/vpc.tf
new file mode 100644
index 0000000..d30944f
--- /dev/null
+++ b/terraform/vpc.tf
@@ -0,0 +1,124 @@
+# vpc.tf 
+# Create VPC/Subnet/Security Group/ACL
+
+#provider "aws" {
+#        region     = "${var.region}"
+#} # end provider
+
+# create the VPC
+resource "aws_vpc" "My_VPC" {
+  cidr_block           = "${var.vpcCIDRblock}"
+  instance_tenancy     = "${var.instanceTenancy}" 
+  enable_dns_support   = "${var.dnsSupport}" 
+  enable_dns_hostnames = "${var.dnsHostNames}"
+
+tags {
+    Name = "VPC EC2 API-Op"
+  }
+} # end resource
+
+# create the Subnet
+resource "aws_subnet" "My_VPC_Subnet" {
+  vpc_id                  = "${aws_vpc.My_VPC.id}"
+  cidr_block              = "${var.subnetCIDRblock}"
+  map_public_ip_on_launch = "${var.mapPublicIP}" 
+  availability_zone       = "${var.availabilityZone}"
+
+tags = {
+   Name = "VPC Subnet API-Op"
+  }
+} # end resource
+
+# Create the Security Group
+resource "aws_security_group" "My_VPC_Security_Group" {
+  vpc_id       = "${aws_vpc.My_VPC.id}"
+  name         = "My VPC Security Group"
+  description  = "My VPC Security Group"
+
+ingress {
+    cidr_blocks = "${var.ingressCIDRblock}"  
+    from_port   = 22
+    to_port     = 22
+    protocol    = "tcp"
+  }
+
+tags = {
+        Name = "API-Op VPC Security Group"
+  }
+
+} # end resource
+
+# create VPC Network access control list
+resource "aws_network_acl" "My_VPC_Security_ACL" {
+  vpc_id = "${aws_vpc.My_VPC.id}"
+  subnet_ids = [ "${aws_subnet.My_VPC_Subnet.id}" ]
+
+# allow port 22
+  ingress {
+    protocol   = "tcp"
+    rule_no    = 100
+    action     = "allow"
+    cidr_block = "${var.destinationCIDRblock}" 
+    from_port  = 22
+    to_port    = 22
+  }
+
+# allow ingress ephemeral ports 
+  ingress {
+    protocol   = "tcp"
+    rule_no    = 200
+    action     = "allow"
+    cidr_block = "${var.destinationCIDRblock}"
+    from_port  = 1024
+    to_port    = 65535
+  }
+
+# allow egress ephemeral ports
+  egress {
+    protocol   = "tcp"
+    rule_no    = 100
+    action     = "allow"
+    cidr_block = "${var.destinationCIDRblock}"
+    from_port  = 1024
+    to_port    = 65535
+  }
+
+tags {
+    Name = "API-Op VPC ACL"
+  }
+
+} # end resource
+
+# Create the Internet Gateway
+resource "aws_internet_gateway" "My_VPC_GW" {
+  vpc_id = "${aws_vpc.My_VPC.id}"
+
+tags {
+        Name = "API-Op VPC Internet Gateway"
+    }
+} # end resource
+
+# Create the Route Table
+resource "aws_route_table" "My_VPC_route_table" {
+    vpc_id = "${aws_vpc.My_VPC.id}"
+
+tags {
+        Name = "API-Op VPC Route Table"
+    }
+} # end resource
+
+# Create the Internet Access
+resource "aws_route" "My_VPC_internet_access" {
+  route_table_id        = "${aws_route_table.My_VPC_route_table.id}"
+  destination_cidr_block = "${var.destinationCIDRblock}"
+  gateway_id             = "${aws_internet_gateway.My_VPC_GW.id}"
+} # end resource
+
+# Associate the Route Table with the Subnet
+resource "aws_route_table_association" "My_VPC_association" {
+    subnet_id      = "${aws_subnet.My_VPC_Subnet.id}"
+    route_table_id = "${aws_route_table.My_VPC_route_table.id}"
+} # end resource
+
+# end vpc.tf
+
-- 
2.20.1

